{"ast":null,"code":"import crontab from \"crontab\";\nimport { buildJob, serialiseJob } from \"./helpers\";\nimport { v4 } from \"uuid\";\nlet api = null;\nlet jobs = [];\n\nconst boot = async reset => {\n  // if (api && !reset) {\n  //     return api;\n  // }\n  return new Promise((resolve, reject) => {\n    crontab.load((err, _api) => {\n      if (err) {\n        return reject(err);\n      }\n\n      api = _api;\n      jobs = api.jobs().map(j => buildJob(j, v4()));\n      return resolve(api);\n    });\n  });\n};\n\nexport const getJobs = async reset => {\n  if (reset) {\n    await boot(reset);\n  }\n\n  return jobs.map(job => {\n    return serialiseJob(job);\n  });\n};\nexport const getQueue = async () => {\n  // await boot();\n  return api.jobs().map(j => buildJob(j, v4()));\n};\nexport const makeJob = async data => {\n  // await boot();\n  const newJob = api.create(data.command, data.interval, data.comment);\n\n  if (!newJob || !newJob.isValid()) {\n    return {\n      error: 'Invalid cron syntax'\n    };\n  }\n\n  return buildJob(newJob, data.key);\n};\nexport const deleteJob = async key => {\n  return new Promise(async resolve => {\n    const job = jobs.find(job => job.key === key);\n    jobs = jobs.filter(job => job.key !== key);\n    api.remove(job.job);\n    api.save(() => {\n      resolve({\n        job,\n        jobs\n      });\n    });\n  });\n};\nexport const makeOrFindJob = data => {\n  // console.log(api);\n  return new Promise(async (resolve, reject) => {\n    // await boot();\n    const existing = jobs.find(job => job.key === data.key); // console.log(jobs)\n\n    if (existing) {\n      api.remove(existing.job);\n      jobs = jobs.filter(job => job.key !== data.key);\n    }\n\n    const job = await makeJob(data);\n    jobs.push(job);\n    api.save(() => {\n      resolve({\n        job,\n        jobs\n      });\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}