{"ast":null,"code":"import crontab from \"crontab\";\nimport { buildJob, serialiseJob } from \"./helpers\";\nimport { v4 } from \"uuid\";\nlet api = null;\nlet jobs = [];\n\nconst boot = async reset => {\n  // if (api && !reset) {\n  //     return api;\n  // }\n  return new Promise((resolve, reject) => {\n    crontab.load((err, _api) => {\n      if (err) {\n        return reject(err);\n      }\n\n      api = _api;\n      jobs = api.jobs().map(j => buildJob(j, v4()));\n      return resolve(api);\n    });\n  });\n};\n\nexport const getJobs = async reset => {\n  if (reset) {\n    await boot(reset);\n  }\n\n  return jobs.map(job => {\n    return serialiseJob(job);\n  });\n};\nexport const getQueue = async () => {\n  // await boot();\n  return api.jobs().map(j => buildJob(j, v4()));\n};\nexport const makeJob = async data => {\n  // await boot();\n  const newJob = api.create(data.command, data.interval, data.comment);\n\n  if (!newJob || !newJob.isValid()) {\n    return {\n      error: 'Invalid cron syntax'\n    };\n  }\n\n  return buildJob(newJob, data.key);\n};\nexport const deleteJob = async key => {\n  return new Promise(async resolve => {\n    const job = jobs.find(job => job.key === key);\n    jobs = jobs.filter(job => job.key !== key);\n    api.remove(job.job);\n    api.save(() => {\n      resolve({\n        job,\n        jobs\n      });\n    });\n  });\n};\nexport const makeOrFindJob = data => {\n  // console.log(api);\n  return new Promise(async (resolve, reject) => {\n    // await boot();\n    const existing = jobs.find(job => job.key === data.key); // console.log(jobs)\n\n    if (existing) {\n      api.remove(existing.job);\n      jobs = jobs.filter(job => job.key !== data.key);\n    }\n\n    const job = await makeJob(data);\n    jobs.push(job);\n    api.save(() => {\n      resolve({\n        job,\n        jobs\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/owen/Sites/macron-web/utils/crontab.js"],"names":["crontab","buildJob","serialiseJob","v4","api","jobs","boot","reset","Promise","resolve","reject","load","err","_api","map","j","getJobs","job","getQueue","makeJob","data","newJob","create","command","interval","comment","isValid","error","key","deleteJob","find","filter","remove","save","makeOrFindJob","existing","push"],"mappings":"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","sourcesContent":["import crontab from \"crontab\";\nimport {buildJob, serialiseJob} from \"./helpers\";\nimport {v4} from \"uuid\";\n\nlet api = null;\nlet jobs = [];\n\nconst boot = async (reset) => {\n    // if (api && !reset) {\n    //     return api;\n    // }\n\n    return new Promise((resolve, reject) => {\n        crontab.load((err, _api) => {\n            if (err) {\n                return reject(err)\n            }\n\n            api = _api;\n\n            jobs = api.jobs().map(j => buildJob(j, v4()));\n\n            return resolve(api);\n        });\n    })\n}\n\nexport const getJobs = async (reset) => {\n    if (reset) {\n        await boot(reset);\n    }\n\n    return jobs.map(job => {\n        return serialiseJob(job);\n    });\n}\n\nexport const getQueue = async () => {\n    // await boot();\n\n    return api.jobs().map(j => buildJob(j, v4()));\n}\n\nexport const makeJob = async (data) => {\n    // await boot();\n\n    const newJob = api.create(data.command, data.interval, data.comment);\n\n    if (!newJob || !newJob.isValid()) {\n      return {\n          error: 'Invalid cron syntax',\n      }\n    }\n\n    return buildJob(newJob, data.key)\n}\n\nexport const deleteJob = async key => {\n    return new Promise(async (resolve) => {\n        const job = jobs.find(job => job.key === key);\n        jobs = jobs.filter(job => job.key !== key);\n\n        api.remove(job.job);\n\n        api.save(() => {\n            resolve({\n                job,\n                jobs,\n            });\n        });\n    })\n}\n\nexport const makeOrFindJob = data => {\n    // console.log(api);\n    return new Promise(async (resolve, reject) => {\n        // await boot();\n\n        const existing = jobs.find(job => job.key === data.key);\n        // console.log(jobs)\n        if (existing) {\n            api.remove(existing.job);\n            jobs = jobs.filter(job => job.key !== data.key);\n        }\n\n        const job = await makeJob(data);\n\n        jobs.push(job);\n\n        api.save(() => {\n            resolve({\n                job,\n                jobs,\n            });\n        });\n    })\n}\n"]},"metadata":{},"sourceType":"module"}