{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport { makeOrFindJob } from \"../../utils/crontab\";\nimport { serialiseJob } from \"../../utils/helpers\";\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n    var payload, _yield$makeOrFindJob, job, jobs, error;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = JSON.parse(req.body);\n            _context.next = 3;\n            return makeOrFindJob(payload);\n\n          case 3:\n            _yield$makeOrFindJob = _context.sent;\n            job = _yield$makeOrFindJob.job;\n            jobs = _yield$makeOrFindJob.jobs;\n            error = _yield$makeOrFindJob.error;\n\n            if (!error) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.json({\n              error: error\n            }));\n\n          case 9:\n            res.json({\n              job: serialiseJob(job),\n              jobs: jobs.map(function (j) {\n                return serialiseJob(j);\n              })\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}