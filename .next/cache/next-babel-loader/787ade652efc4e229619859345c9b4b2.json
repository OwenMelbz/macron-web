{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { v4 } from \"uuid\";\nexport var endpoint = function endpoint(path) {\n  return \"/api/\".concat(path);\n};\nexport var waitFor = function waitFor(seconds) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, seconds * 1000);\n  });\n};\nexport var asyncForEach = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(array, callback) {\n    var index;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            index = 0;\n\n          case 1:\n            if (!(index < array.length)) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return callback(array[index], index, array);\n\n          case 4:\n            index++;\n            _context.next = 1;\n            break;\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function asyncForEach(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var emojiUrl = function emojiUrl(emoji) {\n  // Create a canvas element\n  var canvas = document.createElement('canvas');\n  canvas.height = 64;\n  canvas.width = 64; // Get the canvas context\n\n  var context = canvas.getContext('2d');\n  context.font = '64px serif';\n  context.fillText(emoji, 0, 64); // Get the custom URL\n\n  return canvas.toDataURL();\n};\nexport var buildJob = function buildJob(job, key) {\n  return {\n    job: job,\n    key: key,\n    name: job.comment() || job.render()\n  };\n};\nexport var serialiseJob = function serialiseJob(job) {\n  return {\n    key: job.key,\n    name: job.name,\n    job: {\n      comment: job.job.comment(),\n      command: job.job.command(),\n      minute: job.job.minute().toString(),\n      hour: job.job.hour().toString(),\n      dom: job.job.dom().toString(),\n      month: job.job.month().toString(),\n      dow: job.job.dow().toString()\n    }\n  };\n};\nexport var placeholder = function placeholder() {\n  return {\n    \"key\": v4(),\n    \"name\": \"hello world\",\n    \"job\": {\n      \"comment\": \"hello world\",\n      \"command\": \"echo 'hello world'\",\n      \"minute\": \"*\",\n      \"hour\": \"*\",\n      \"dom\": \"*\",\n      \"month\": \"*\",\n      \"dow\": \"*\"\n    }\n  };\n};","map":{"version":3,"sources":["/Users/owen/Sites/macron-web/utils/helpers.js"],"names":["v4","endpoint","path","waitFor","seconds","Promise","resolve","setTimeout","asyncForEach","array","callback","index","length","emojiUrl","emoji","canvas","document","createElement","height","width","context","getContext","font","fillText","toDataURL","buildJob","job","key","name","comment","render","serialiseJob","command","minute","toString","hour","dom","month","dow","placeholder"],"mappings":"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","sourcesContent":["import {v4} from \"uuid\";\n\nexport const endpoint = path => {\n    return `/api/${path}`\n}\n\nexport const waitFor = seconds =>\n    new Promise(resolve => setTimeout(resolve, seconds * 1000));\n\nexport const asyncForEach = async (array, callback) => {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n    }\n};\n\nexport const emojiUrl = emoji => {\n    // Create a canvas element\n    const canvas = document.createElement('canvas');\n    canvas.height = 64;\n    canvas.width = 64;\n\n    // Get the canvas context\n    const context = canvas.getContext('2d');\n    context.font = '64px serif';\n    context.fillText(emoji, 0, 64);\n\n    // Get the custom URL\n    return canvas.toDataURL();\n};\n\nexport const buildJob = (job, key) => ({\n    job,\n    key,\n    name: job.comment() || job.render(),\n});\n\nexport const serialiseJob = job => ({\n    key: job.key,\n    name: job.name,\n    job: {\n        comment: job.job.comment(),\n        command: job.job.command(),\n        minute: job.job.minute().toString(),\n        hour: job.job.hour().toString(),\n        dom: job.job.dom().toString(),\n        month: job.job.month().toString(),\n        dow: job.job.dow().toString(),\n    }\n})\n\nexport const placeholder = () => {\n    return {\n        \"key\": v4(),\n        \"name\": \"hello world\",\n        \"job\": {\n            \"comment\": \"hello world\",\n            \"command\": \"echo 'hello world'\",\n            \"minute\": \"*\",\n            \"hour\": \"*\",\n            \"dom\": \"*\",\n            \"month\": \"*\",\n            \"dow\": \"*\"\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}