{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport crontab from \"crontab\";\nimport { buildJob, serialiseJob } from \"./helpers\";\nimport { v4 } from \"uuid\";\nvar api = null;\nvar jobs = [];\n\nvar boot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(reset) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              crontab.load(function (err, _api) {\n                if (err) {\n                  return reject(err);\n                }\n\n                api = _api;\n                jobs = api.jobs().map(function (j) {\n                  return buildJob(j, v4());\n                });\n                return resolve(api);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function boot(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var getJobs = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(reset) {\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!reset) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return boot(reset);\n\n          case 3:\n            return _context2.abrupt(\"return\", jobs.map(function (job) {\n              return serialiseJob(job);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getJobs(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getQueue = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", api.jobs().map(function (j) {\n              return buildJob(j, v4());\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getQueue() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var makeJob = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data) {\n    var newJob;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // await boot();\n            newJob = api.create(data.command, data.interval, data.comment);\n\n            if (!(!newJob || !newJob.isValid())) {\n              _context4.next = 3;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", {\n              error: 'Invalid cron syntax'\n            });\n\n          case 3:\n            return _context4.abrupt(\"return\", buildJob(newJob, data.key));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function makeJob(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var deleteJob = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(key) {\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n              var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(resolve) {\n                var job;\n                return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        job = jobs.find(function (job) {\n                          return job.key === key;\n                        });\n                        jobs = jobs.filter(function (job) {\n                          return job.key !== key;\n                        });\n                        api.remove(job.job);\n                        api.save(function () {\n                          resolve({\n                            job: job,\n                            jobs: jobs\n                          });\n                        });\n\n                      case 4:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function (_x5) {\n                return _ref6.apply(this, arguments);\n              };\n            }()));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function deleteJob(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var makeOrFindJob = function makeOrFindJob(data) {\n  // console.log(api);\n  return new Promise( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(resolve, reject) {\n      var existing, job;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              // await boot();\n              existing = jobs.find(function (job) {\n                return job.key === data.key;\n              }); // console.log(jobs)\n\n              if (existing) {\n                api.remove(existing.job);\n                jobs = jobs.filter(function (job) {\n                  return job.key !== data.key;\n                });\n              }\n\n              _context7.next = 4;\n              return makeJob(data);\n\n            case 4:\n              job = _context7.sent;\n              jobs.push(job);\n              api.save(function () {\n                resolve({\n                  job: job,\n                  jobs: jobs\n                });\n              });\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x6, _x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n};","map":null,"metadata":{},"sourceType":"module"}