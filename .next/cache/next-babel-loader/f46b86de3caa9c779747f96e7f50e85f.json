{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Sites/macron-web/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { message, Modal } from 'antd';\nimport Placeholder from '../components/Placeholder';\nimport Sidebar from '../components/Sidebar';\nimport Editor from '../components/Editor';\nimport { placeholder } from \"../utils/helpers\";\nimport { fire } from \"../utils/events\";\n\nfunction App({\n  initialJobs\n}) {\n  const {\n    0: jobs,\n    1: setJobs\n  } = useState(initialJobs);\n  const {\n    0: job,\n    1: setJob\n  } = useState(null);\n\n  const connect = async (selected = null) => {\n    const res = await fetch('http://localhost:3000/api/get');\n    const js = await res.json();\n    setJobs(js);\n  };\n\n  const onCreate = () => {\n    if (job && !job.key) {\n      return 'already an unsaved job.';\n    }\n\n    fire('new-job');\n    const b = placeholder();\n    return setJob(b);\n  };\n\n  const onCancel = async () => {\n    message.success('Changes cancelled.');\n    setJob(null);\n    const res = await fetch('http://localhost:3000/api/refresh');\n    const js = await res.json();\n    setJobs(js);\n  };\n\n  const onSave = async (j, payload) => {\n    const data = {\n      key: j.key,\n      command: payload.command,\n      comment: payload.name,\n      interval: [payload.minute, payload.hour, payload.day, payload.month, payload.weekday].join(' ')\n    };\n    const res = await fetch('http://localhost:3000/api/save', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n    const {\n      job,\n      jobs,\n      error\n    } = await res.json();\n\n    if (error) {\n      return message.error(error);\n    }\n\n    setJobs(jobs);\n    setJob(job);\n    return message.success(`${job.name} saved.`);\n  };\n\n  const onDelete = j => {\n    Modal.confirm({\n      title: j.name,\n      content: `Are you sure you want to delete this job?`,\n      onOk: async () => {\n        const res = await fetch('http://localhost:3000/api/delete', {\n          method: 'POST',\n          body: j.key\n        });\n        const jobs = await res.json();\n        setJobs(jobs);\n        setJob(null);\n        message.error(`${j.name} deleted.`);\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"flex flex-wrap min-h-screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, __jsx(\"nav\", {\n    className: \"w-1/4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, __jsx(Sidebar, {\n    onCreate: onCreate,\n    jobs: jobs,\n    job: job,\n    onSelect: setJob,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"w-3/4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, job ? __jsx(Editor, {\n    onCancel: onCancel,\n    onSave: onSave,\n    onDelete: onDelete,\n    job: job,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }) : __jsx(Placeholder, {\n    onCreate: onCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }))));\n}\n\nexport const getServerSideProps = async () => {\n  try {\n    const res = await fetch('http://localhost:3000/api/refresh');\n    return {\n      props: {\n        initialJobs: await res.json()\n      }\n    };\n  } catch (error) {\n    return {\n      props: {\n        initialJobs: []\n      }\n    };\n  }\n};\nexport default App;","map":{"version":3,"sources":["/Users/owen/Sites/macron-web/pages/index.js"],"names":["React","useState","message","Modal","Placeholder","Sidebar","Editor","placeholder","fire","App","initialJobs","jobs","setJobs","job","setJob","connect","selected","res","fetch","js","json","onCreate","key","b","onCancel","success","onSave","j","payload","data","command","comment","name","interval","minute","hour","day","month","weekday","join","method","body","JSON","stringify","error","onDelete","confirm","title","content","onOk","getServerSideProps","props"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {message, Modal} from 'antd';\nimport Placeholder from '../components/Placeholder';\nimport Sidebar from '../components/Sidebar';\nimport Editor from '../components/Editor';\nimport {placeholder} from \"../utils/helpers\";\nimport {fire} from \"../utils/events\";\n\nfunction App({initialJobs}) {\n  const [jobs, setJobs] = useState(initialJobs);\n  const [job, setJob] = useState(null);\n\n  const connect = async (selected = null) => {\n    const res = await fetch('http://localhost:3000/api/get')\n    const js = await res.json();\n\n    setJobs(js);\n  };\n\n  const onCreate = () => {\n    if (job && !job.key) {\n      return 'already an unsaved job.';\n    }\n\n    fire('new-job');\n\n    const b = placeholder();\n    return setJob(b);\n  };\n\n  const onCancel = async () => {\n    message.success('Changes cancelled.');\n    setJob(null);\n\n    const res = await fetch('http://localhost:3000/api/refresh')\n    const js = await res.json();\n\n    setJobs(js);\n  };\n\n  const onSave = async (j, payload) => {\n    const data = {\n      key: j.key,\n      command: payload.command,\n      comment: payload.name,\n      interval: [\n        payload.minute,\n        payload.hour,\n        payload.day,\n        payload.month,\n        payload.weekday\n      ].join(' '),\n    };\n\n    const res = await fetch('http://localhost:3000/api/save', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n\n    const {job, jobs, error} = await res.json();\n\n    if (error) {\n      return message.error(error);\n    }\n\n    setJobs(jobs);\n    setJob(job);\n\n    return message.success(`${job.name} saved.`);\n  };\n\n  const onDelete = j => {\n    Modal.confirm({\n      title: j.name,\n      content: `Are you sure you want to delete this job?`,\n      onOk: async () => {\n        const res = await fetch('http://localhost:3000/api/delete', {\n          method: 'POST',\n          body: j.key\n        })\n\n        const jobs = await res.json();\n\n        setJobs(jobs);\n        setJob(null);\n\n        message.error(`${j.name} deleted.`);\n      }\n    });\n  };\n\n  return (\n      <>\n        <div className=\"flex flex-wrap min-h-screen\">\n          <nav className=\"w-1/4\">\n            <Sidebar onCreate={onCreate} jobs={jobs} job={job} onSelect={setJob}/>\n          </nav>\n          <div className=\"w-3/4\">\n            {job ? (\n                <Editor\n                    onCancel={onCancel}\n                    onSave={onSave}\n                    onDelete={onDelete}\n                    job={job}\n                />\n            ) : (\n                <Placeholder onCreate={onCreate}/>\n            )}\n          </div>\n        </div>\n      </>\n  );\n}\n\nexport const getServerSideProps = async () => {\n  try {\n    const res = await fetch('http://localhost:3000/api/refresh')\n\n    return {\n      props: {\n        initialJobs: await res.json(),\n      },\n    }\n  } catch (error) {\n    return {\n      props: {\n        initialJobs: [],\n      }\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}