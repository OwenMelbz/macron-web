{"ast":null,"code":"import { v4 } from \"uuid\";\nexport const endpoint = path => {\n  return `http://localhost:3000/api/${path}`;\n};\nexport const waitFor = seconds => new Promise(resolve => setTimeout(resolve, seconds * 1000));\nexport const asyncForEach = async (array, callback) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};\nexport const emojiUrl = emoji => {\n  // Create a canvas element\n  const canvas = document.createElement('canvas');\n  canvas.height = 64;\n  canvas.width = 64; // Get the canvas context\n\n  const context = canvas.getContext('2d');\n  context.font = '64px serif';\n  context.fillText(emoji, 0, 64); // Get the custom URL\n\n  return canvas.toDataURL();\n};\nexport const buildJob = (job, key) => ({\n  job,\n  key,\n  name: job.comment() || job.render()\n});\nexport const serialiseJob = job => ({\n  key: job.key,\n  name: job.name,\n  job: {\n    comment: job.job.comment(),\n    command: job.job.command(),\n    minute: job.job.minute().toString(),\n    hour: job.job.hour().toString(),\n    dom: job.job.dom().toString(),\n    month: job.job.month().toString(),\n    dow: job.job.dow().toString()\n  }\n});\nexport const placeholder = () => {\n  return {\n    \"key\": v4(),\n    \"name\": \"hello world\",\n    \"job\": {\n      \"comment\": \"hello world\",\n      \"command\": \"echo 'hello world'\",\n      \"minute\": \"*\",\n      \"hour\": \"*\",\n      \"dom\": \"*\",\n      \"month\": \"*\",\n      \"dow\": \"*\"\n    }\n  };\n};","map":{"version":3,"sources":["/Users/owen/Sites/macron-web/utils/helpers.js"],"names":["v4","endpoint","path","waitFor","seconds","Promise","resolve","setTimeout","asyncForEach","array","callback","index","length","emojiUrl","emoji","canvas","document","createElement","height","width","context","getContext","font","fillText","toDataURL","buildJob","job","key","name","comment","render","serialiseJob","command","minute","toString","hour","dom","month","dow","placeholder"],"mappings":"AAAA,SAAQA,EAAR,QAAiB,MAAjB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,IAAI,IAAI;AAC5B,SAAQ,6BAA4BA,IAAK,EAAzC;AACH,CAFM;AAIP,OAAO,MAAMC,OAAO,GAAGC,OAAO,IAC1B,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,OAAO,GAAG,IAApB,CAAjC,CADG;AAGP,OAAO,MAAMI,YAAY,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AACnD,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,KAAK,CAACG,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AAC/C,UAAMD,QAAQ,CAACD,KAAK,CAACE,KAAD,CAAN,EAAeA,KAAf,EAAsBF,KAAtB,CAAd;AACH;AACJ,CAJM;AAMP,OAAO,MAAMI,QAAQ,GAAGC,KAAK,IAAI;AAC7B;AACA,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,EAAAA,MAAM,CAACG,MAAP,GAAgB,EAAhB;AACAH,EAAAA,MAAM,CAACI,KAAP,GAAe,EAAf,CAJ6B,CAM7B;;AACA,QAAMC,OAAO,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAhB;AACAD,EAAAA,OAAO,CAACE,IAAR,GAAe,YAAf;AACAF,EAAAA,OAAO,CAACG,QAAR,CAAiBT,KAAjB,EAAwB,CAAxB,EAA2B,EAA3B,EAT6B,CAW7B;;AACA,SAAOC,MAAM,CAACS,SAAP,EAAP;AACH,CAbM;AAeP,OAAO,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAMC,GAAN,MAAe;AACnCD,EAAAA,GADmC;AAEnCC,EAAAA,GAFmC;AAGnCC,EAAAA,IAAI,EAAEF,GAAG,CAACG,OAAJ,MAAiBH,GAAG,CAACI,MAAJ;AAHY,CAAf,CAAjB;AAMP,OAAO,MAAMC,YAAY,GAAGL,GAAG,KAAK;AAChCC,EAAAA,GAAG,EAAED,GAAG,CAACC,GADuB;AAEhCC,EAAAA,IAAI,EAAEF,GAAG,CAACE,IAFsB;AAGhCF,EAAAA,GAAG,EAAE;AACDG,IAAAA,OAAO,EAAEH,GAAG,CAACA,GAAJ,CAAQG,OAAR,EADR;AAEDG,IAAAA,OAAO,EAAEN,GAAG,CAACA,GAAJ,CAAQM,OAAR,EAFR;AAGDC,IAAAA,MAAM,EAAEP,GAAG,CAACA,GAAJ,CAAQO,MAAR,GAAiBC,QAAjB,EAHP;AAIDC,IAAAA,IAAI,EAAET,GAAG,CAACA,GAAJ,CAAQS,IAAR,GAAeD,QAAf,EAJL;AAKDE,IAAAA,GAAG,EAAEV,GAAG,CAACA,GAAJ,CAAQU,GAAR,GAAcF,QAAd,EALJ;AAMDG,IAAAA,KAAK,EAAEX,GAAG,CAACA,GAAJ,CAAQW,KAAR,GAAgBH,QAAhB,EANN;AAODI,IAAAA,GAAG,EAAEZ,GAAG,CAACA,GAAJ,CAAQY,GAAR,GAAcJ,QAAd;AAPJ;AAH2B,CAAL,CAAxB;AAcP,OAAO,MAAMK,WAAW,GAAG,MAAM;AAC7B,SAAO;AACH,WAAOvC,EAAE,EADN;AAEH,YAAQ,aAFL;AAGH,WAAO;AACH,iBAAW,aADR;AAEH,iBAAW,oBAFR;AAGH,gBAAU,GAHP;AAIH,cAAQ,GAJL;AAKH,aAAO,GALJ;AAMH,eAAS,GANN;AAOH,aAAO;AAPJ;AAHJ,GAAP;AAaH,CAdM","sourcesContent":["import {v4} from \"uuid\";\n\nexport const endpoint = path => {\n    return `http://localhost:3000/api/${path}`\n}\n\nexport const waitFor = seconds =>\n    new Promise(resolve => setTimeout(resolve, seconds * 1000));\n\nexport const asyncForEach = async (array, callback) => {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n    }\n};\n\nexport const emojiUrl = emoji => {\n    // Create a canvas element\n    const canvas = document.createElement('canvas');\n    canvas.height = 64;\n    canvas.width = 64;\n\n    // Get the canvas context\n    const context = canvas.getContext('2d');\n    context.font = '64px serif';\n    context.fillText(emoji, 0, 64);\n\n    // Get the custom URL\n    return canvas.toDataURL();\n};\n\nexport const buildJob = (job, key) => ({\n    job,\n    key,\n    name: job.comment() || job.render(),\n});\n\nexport const serialiseJob = job => ({\n    key: job.key,\n    name: job.name,\n    job: {\n        comment: job.job.comment(),\n        command: job.job.command(),\n        minute: job.job.minute().toString(),\n        hour: job.job.hour().toString(),\n        dom: job.job.dom().toString(),\n        month: job.job.month().toString(),\n        dow: job.job.dow().toString(),\n    }\n})\n\nexport const placeholder = () => {\n    return {\n        \"key\": v4(),\n        \"name\": \"hello world\",\n        \"job\": {\n            \"comment\": \"hello world\",\n            \"command\": \"echo 'hello world'\",\n            \"minute\": \"*\",\n            \"hour\": \"*\",\n            \"dom\": \"*\",\n            \"month\": \"*\",\n            \"dow\": \"*\"\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}